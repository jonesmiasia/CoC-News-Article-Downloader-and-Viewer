# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'app.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pandas as pd
import webbrowser
import os
from web_crawler import start_crawl

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(670, 765)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 671, 821))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.groupBox = QtWidgets.QGroupBox(self.tab)
        self.groupBox.setGeometry(QtCore.QRect(10, 80, 641, 51))
        self.groupBox.setObjectName("groupBox")
        self.crawlButton = QtWidgets.QPushButton(self.groupBox)
        self.crawlButton.setGeometry(QtCore.QRect(510, 20, 111, 23))
        self.crawlButton.setObjectName("crawlButton")
        self.seedLabel = QtWidgets.QLabel(self.groupBox)
        self.seedLabel.setGeometry(QtCore.QRect(10, 20, 261, 21))
        self.seedLabel.setObjectName("seedLabel")
        self.textBrowser = QtWidgets.QTextBrowser(self.tab)
        self.textBrowser.setGeometry(QtCore.QRect(10, 140, 641, 81))
        self.textBrowser.setObjectName("textBrowser")
        self.groupBox_2 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_2.setGeometry(QtCore.QRect(10, 10, 641, 61))
        self.groupBox_2.setObjectName("groupBox_2")
        self.label = QtWidgets.QLabel(self.groupBox_2)
        self.label.setGeometry(QtCore.QRect(10, 20, 461, 31))
        self.label.setWordWrap(True)
        self.label.setObjectName("label")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.articleListWidget = QtWidgets.QListWidget(self.tab_2)
        self.articleListWidget.setGeometry(QtCore.QRect(10, 290, 641, 371))
        self.articleListWidget.setObjectName("articleListWidget")
        self.viewInfo = QtWidgets.QLabel(self.tab_2)
        self.viewInfo.setGeometry(QtCore.QRect(20, 680, 47, 13))
        self.viewInfo.setObjectName("viewInfo")
        self.dummyLabel = QtWidgets.QLabel(self.tab_2)
        self.dummyLabel.setGeometry(QtCore.QRect(10, 270, 641, 21))
        self.dummyLabel.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border: 1px solid grey")
        self.dummyLabel.setWordWrap(False)
        self.dummyLabel.setObjectName("dummyLabel")
        self.uploadGroupBox = QtWidgets.QGroupBox(self.tab_2)
        self.uploadGroupBox.setGeometry(QtCore.QRect(10, 100, 641, 81))
        self.uploadGroupBox.setObjectName("uploadGroupBox")
        self.infoLabel = QtWidgets.QLabel(self.uploadGroupBox)
        self.infoLabel.setGeometry(QtCore.QRect(10, 50, 641, 16))
        self.infoLabel.setObjectName("infoLabel")
        self.fileNameLabel = QtWidgets.QLabel(self.uploadGroupBox)
        self.fileNameLabel.setGeometry(QtCore.QRect(110, 20, 441, 21))
        self.fileNameLabel.setObjectName("fileNameLabel")
        self.selectFilePushButton = QtWidgets.QPushButton(self.uploadGroupBox)
        self.selectFilePushButton.setGeometry(QtCore.QRect(10, 20, 91, 23))
        self.selectFilePushButton.setObjectName("selectFilePushButton")
        self.uploadButton = QtWidgets.QPushButton(self.uploadGroupBox)
        self.uploadButton.setGeometry(QtCore.QRect(560, 20, 75, 23))
        self.uploadButton.setObjectName("uploadButton")
        self.filterOptionsGroupBox = QtWidgets.QGroupBox(self.tab_2)
        self.filterOptionsGroupBox.setEnabled(False)
        self.filterOptionsGroupBox.setGeometry(QtCore.QRect(10, 190, 641, 71))
        self.filterOptionsGroupBox.setObjectName("filterOptionsGroupBox")
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(self.filterOptionsGroupBox)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(10, 20, 621, 31))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.yearLabel = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        self.yearLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.yearLabel.setIndent(-1)
        self.yearLabel.setObjectName("yearLabel")
        self.horizontalLayout_3.addWidget(self.yearLabel)
        self.yearComboBox = QtWidgets.QComboBox(self.horizontalLayoutWidget_3)
        self.yearComboBox.setObjectName("yearComboBox")
        self.yearComboBox.addItem("")
        self.yearComboBox.addItem("")
        self.yearComboBox.addItem("")
        self.yearComboBox.addItem("")
        self.yearComboBox.addItem("")
        self.yearComboBox.addItem("")
        self.yearComboBox.addItem("")
        self.yearComboBox.addItem("")
        self.yearComboBox.addItem("")
        self.yearComboBox.addItem("")
        self.yearComboBox.addItem("")
        self.yearComboBox.addItem("")
        self.horizontalLayout_3.addWidget(self.yearComboBox)
        self.monthLabel = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        self.monthLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.monthLabel.setObjectName("monthLabel")
        self.horizontalLayout_3.addWidget(self.monthLabel)
        self.monthComboBox = QtWidgets.QComboBox(self.horizontalLayoutWidget_3)
        self.monthComboBox.setObjectName("monthComboBox")
        self.monthComboBox.addItem("")
        self.monthComboBox.addItem("")
        self.monthComboBox.addItem("")
        self.monthComboBox.addItem("")
        self.monthComboBox.addItem("")
        self.monthComboBox.addItem("")
        self.monthComboBox.addItem("")
        self.monthComboBox.addItem("")
        self.monthComboBox.addItem("")
        self.monthComboBox.addItem("")
        self.monthComboBox.addItem("")
        self.monthComboBox.addItem("")
        self.monthComboBox.addItem("")
        self.horizontalLayout_3.addWidget(self.monthComboBox)
        self.orderLabel = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        self.orderLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.orderLabel.setObjectName("orderLabel")
        self.horizontalLayout_3.addWidget(self.orderLabel)
        self.orderComboBox = QtWidgets.QComboBox(self.horizontalLayoutWidget_3)
        self.orderComboBox.setObjectName("orderComboBox")
        self.orderComboBox.addItem("")
        self.orderComboBox.addItem("")
        self.horizontalLayout_3.addWidget(self.orderComboBox)
        self.NDcheckBox = QtWidgets.QCheckBox(self.horizontalLayoutWidget_3)
        self.NDcheckBox.setEnabled(False)
        self.NDcheckBox.setObjectName("NDcheckBox")
        self.horizontalLayout_3.addWidget(self.NDcheckBox)
        self.filterButton = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        self.filterButton.setObjectName("filterButton")
        self.horizontalLayout_3.addWidget(self.filterButton)
        self.filterInfo = QtWidgets.QLabel(self.filterOptionsGroupBox)
        self.filterInfo.setGeometry(QtCore.QRect(10, 50, 161, 16))
        self.filterInfo.setObjectName("filterInfo")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.tab_2)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(490, 660, 160, 41))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.viewSelectedButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.viewSelectedButton.setEnabled(False)
        self.viewSelectedButton.setObjectName("viewSelectedButton")
        self.horizontalLayout.addWidget(self.viewSelectedButton)
        self.saveArticleButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.saveArticleButton.setEnabled(False)
        self.saveArticleButton.setObjectName("saveArticleButton")
        self.horizontalLayout.addWidget(self.saveArticleButton)
        self.groupBox_3 = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 10, 641, 80))
        self.groupBox_3.setObjectName("groupBox_3")
        self.label_2 = QtWidgets.QLabel(self.groupBox_3)
        self.label_2.setGeometry(QtCore.QRect(10, 20, 621, 51))
        self.label_2.setWordWrap(True)
        self.label_2.setObjectName("label_2")
        self.tabWidget.addTab(self.tab_2, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 670, 21))
        self.menubar.setObjectName("menubar")
        self.menuCrawler = QtWidgets.QMenu(self.menubar)
        self.menuCrawler.setObjectName("menuCrawler")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionREADME = QtWidgets.QAction(MainWindow)
        self.actionREADME.setObjectName("actionREADME")
        self.actionAbout_2 = QtWidgets.QAction(MainWindow)
        self.actionAbout_2.setObjectName("actionAbout_2")
        self.menuHelp.addAction(self.actionREADME)
        self.menuHelp.addAction(self.actionAbout_2)
        self.menubar.addAction(self.menuCrawler.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.actionAbout.triggered.connect(self.about)
        self.crawlButton.clicked.connect(self.crawl_warning)
        self.selectFilePushButton.clicked.connect(self.open_file)
        self.uploadButton.clicked.connect(self.upload_clicked)
        self.filterButton.clicked.connect(self.filter_clicked)
        self.articleListWidget.currentRowChanged.connect(self.enabler)
        self.viewSelectedButton.clicked.connect(self.open_article)
        self.articleListWidget.itemDoubleClicked.connect(self.open_article)
        self.saveArticleButton.clicked.connect(self.save_article)

    def about(self):
        about = QtWidgets.QMessageBox()
        about.setWindowTitle("About")
        about.setText("COCNADV v1\nMiasia Jones\nMade for CS 6675 Homework 1")

        box = about.exec_()

    def crawl_warning(self):
        warning = QtWidgets.QMessageBox()
        warning.setWindowTitle("Warning!")
        warning.setText("The crawling process may take a long time because of the large amount of URLs being crawled. The app will freeze until crawling is complete.\n\nDo you want to continue?")
        warning.setIcon(QtWidgets.QMessageBox.Warning)
        warning.setStandardButtons(QtWidgets.QMessageBox.Yes|QtWidgets.QMessageBox.No)
        warning.setDefaultButton(QtWidgets.QMessageBox.No)

        warning.buttonClicked.connect(self.crawling_option)
        self.warning = warning

        box = warning.exec_()

    def crawling_option(self, i):
        if i.text() == '&Yes':
            self.warning.done(1)
            self.start_crawl()
    
    def start_crawl(self):
        os.system("python web_crawler.py")

    def open_file(self):
            path = QtWidgets.QFileDialog.getOpenFileName(None, 'Open File', '../data/', '*.csv')
            if path != ('', ''):
                # print(self.path[0])
                self.path = path[0]
                self.fileNameLabel.setText(self.path)
                self.fileNameLabel.adjustSize()
            else:
                self.path = 'data/articles_demo.csv'

    def upload_clicked(self):
        req_columns = ['date', 'title', 'html_content']

        self.articleListWidget.clear()
        

        self.filterOptionsGroupBox.setEnabled(True)
        self.filtered_df = None

        df = pd.read_csv(self.path)

        columns = list(df.columns)

        if all(c in columns for c in req_columns) == True:
            self.infoLabel.setText("New file selected. Using {}".format(self.path))
            self.infoLabel.adjustSize()
            
            self.original_data = df
            
            for i, article in df.iterrows():
                self.articleListWidget.addItem("{} | {}".format(article['date'], article['title'].strip()))

            self.filterInfo.setText("Loaded {} articles...".format(len(df)))
        else:
            self.infoLabel.setText("Invalid .csv file uploaded")
            warning = QtWidgets.QMessageBox()
            warning.setWindowTitle("Warning!")
            warning.setText("Required columns {} were not found in uploaded csv!".format(req_columns))
            warning.setIcon(QtWidgets.QMessageBox.Warning)
            warning.setStandardButtons(QtWidgets.QMessageBox.Ok)

            box = warning.exec_()

    def filter_clicked(self):
        self.articleListWidget.clear()
        df = self.original_data
        df["date"] = pd.to_datetime(df['date'], errors='coerce')
        
        year = str(self.yearComboBox.currentText())
        month = str(self.monthComboBox.currentText())
        order = str(self.orderComboBox.currentText())
        include_nd = self.NDcheckBox.isChecked() # not implemented

        if year == 'All':
            if month == 'All':
                if include_nd == True:
                    filtered_df = df
                else:
                    filtered_df = df[df['date'].notnull()]
            else:
                if include_nd == True:
                    filtered_df = df[(df['date'].dt.month == int(month)) | (df['date'].isnull())]
                else:
                    filtered_df = df[df['date'].dt.month == int(month)]
        else:
            if month == 'All':
                if include_nd == True:
                    filtered_df = df[(df['date'].dt.year == int(year)) | (df['date'].isnull())]
                else:
                    filtered_df = df[df['date'].dt.year == int(year)]
            else:
                if include_nd == True:
                    filtered_df = df[((df['date'].dt.year == int(year)) & (df['date'].dt.month == int(month))) | (df['date'].isnull())]
                else:
                    filtered_df = df[(df['date'].dt.year == int(year)) & (df['date'].dt.month == int(month))]
        
        if len(filtered_df) != 0:
            if order == 'Oldest to Newest':
                filtered_df = filtered_df.sort_values(by=['date']).reset_index(drop=True)
                self.filtered_df = filtered_df
                for i, article in filtered_df.iterrows():
                    self.articleListWidget.addItem("{} | {}".format(article['date'].strftime('%Y-%m-%d'), article['title'].strip()))
            else:
                self.filtered_df = filtered_df
                for i, article in filtered_df.iterrows():
                    self.articleListWidget.addItem("{} | {}".format(article['date'].strftime('%Y-%m-%d'), article['title'].strip()))
            
            self.filterInfo.setText("Loaded {} articles...".format(len(filtered_df)))
        else:
            self.filterInfo.setText("Loaded {} articles...".format(len(filtered_df)))
            self.articleListWidget.addItem("No results")

    def enabler(self):
        self.viewSelectedButton.setEnabled(True)
        self.saveArticleButton.setEnabled(True)

    def open_article(self):
        index = self.articleListWidget.currentRow()

        # print(self.articleListWidget.selectedItems()[0].text())

        if self.articleListWidget.selectedItems()[0].text() != "No results":
            if self.filtered_df is None:
                if len(self.original_data) != 0:
                    # print(self.original_data.iloc[index, :]["title"])
                    temp = open('temp.html','w')
                    html_content = "{}".format(self.original_data["html_content"].values[index])
                    temp.write("<a href='{}' target='_blank'>Actual URL</a>".format(self.original_data["url"].values[index]))
                    temp.write(html_content)
                    temp.close()

                    webbrowser.open('temp.html', new=2)

            elif len(self.filtered_df) != 0:
                # print(self.filtered_df.iloc[index, :]["title"])
                temp = open('temp.html','w')
                html_content = "{}".format(self.filtered_df["html_content"].values[index])
                temp.write("<a href='{}' target='_blank'>Actual URL</a>".format(self.filtered_df['url'].values[index]))
                temp.write(html_content)
                temp.close()

                webbrowser.open('temp.html', new=2)

            self.viewInfo.setText("Viewing selected article...")
            self.viewInfo.adjustSize()

    def save_article(self):
        if not os.path.exists('../articles/'):
            os.makedirs('../articles/')
        
        index = self.articleListWidget.currentRow()

        if self.articleListWidget.selectedItems()[0].text() != "No results":
            if self.filtered_df is None:
                if len(self.original_data) != 0:
                    article_title = (self.original_data["title"].values[index][:30]).replace(" ", "")
                    file = open('../articles/{}.html'.format(article_title),'w')
                    html_content = "{}".format(self.original_data["html_content"].values[index])
                    file.write("<a href='{}' target='_blank'>Actual URL</a>".format(self.original_data["url"].values[index]))
                    file.write(html_content)
                    file.close()

            elif len(self.filtered_df) != 0:
                article_title = (self.filtered_df["title"].values[index][:30]).replace(" ", "")
                file = open('../articles/{}.html'.format(article_title),'w')
                html_content = "{}".format(self.filtered_df["html_content"].values[index])
                file.write("<a href='{}' target='_blank'>Actual URL</a>".format(self.filtered_df["url"].values[index]))
                file.write(html_content)
                file.close()
        
            self.viewInfo.setText("Saved article as articles/{}.html".format(article_title))
            self.viewInfo.adjustSize()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "CoC News Article Downloader and Viewer"))
        self.groupBox.setTitle(_translate("MainWindow", "Settings"))
        self.crawlButton.setText(_translate("MainWindow", "Start Crawling"))
        self.seedLabel.setText(_translate("MainWindow", "Seed URL: https://www.cc.gatech.edu/news/1 "))
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Notes:</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Please refer to console to monitor crawling progress.</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Because of the amount of URLs being crawled, the app will freeze until crawling is complete.</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">This will hopefully be fixed soon.</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Feel free to upload articles_demo.csv in the Manager tab if you do not wish to wait for the crawling to finish.</p></body></html>"))
        self.groupBox_2.setTitle(_translate("MainWindow", "CoC News Web Crawler"))
        self.label.setText(_translate("MainWindow", "This is where you can execute the web crawler to retrieve articles from the CoC News website. Press START CRAWLING to begin crawling."))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Crawler"))
        self.viewInfo.setText(_translate("MainWindow", "..."))
        self.dummyLabel.setText(_translate("MainWindow", " Date            |   Article Title"))
        self.uploadGroupBox.setTitle(_translate("MainWindow", "Upload"))
        self.infoLabel.setText(_translate("MainWindow", "No file selected..."))
        self.fileNameLabel.setText(_translate("MainWindow", "No file selected"))
        self.selectFilePushButton.setText(_translate("MainWindow", "Select file..."))
        self.uploadButton.setText(_translate("MainWindow", "Upload"))
        self.filterOptionsGroupBox.setTitle(_translate("MainWindow", "Filter Options"))
        self.yearLabel.setText(_translate("MainWindow", "Year"))
        self.yearComboBox.setItemText(0, _translate("MainWindow", "All"))
        self.yearComboBox.setItemText(1, _translate("MainWindow", "2021"))
        self.yearComboBox.setItemText(2, _translate("MainWindow", "2020"))
        self.yearComboBox.setItemText(3, _translate("MainWindow", "2019"))
        self.yearComboBox.setItemText(4, _translate("MainWindow", "2018"))
        self.yearComboBox.setItemText(5, _translate("MainWindow", "2017"))
        self.yearComboBox.setItemText(6, _translate("MainWindow", "2016"))
        self.yearComboBox.setItemText(7, _translate("MainWindow", "2015"))
        self.yearComboBox.setItemText(8, _translate("MainWindow", "2014"))
        self.yearComboBox.setItemText(9, _translate("MainWindow", "2013"))
        self.yearComboBox.setItemText(10, _translate("MainWindow", "2012"))
        self.yearComboBox.setItemText(11, _translate("MainWindow", "2011"))
        self.monthLabel.setText(_translate("MainWindow", "Month"))
        self.monthComboBox.setItemText(0, _translate("MainWindow", "All"))
        self.monthComboBox.setItemText(1, _translate("MainWindow", "1"))
        self.monthComboBox.setItemText(2, _translate("MainWindow", "2"))
        self.monthComboBox.setItemText(3, _translate("MainWindow", "3"))
        self.monthComboBox.setItemText(4, _translate("MainWindow", "4"))
        self.monthComboBox.setItemText(5, _translate("MainWindow", "5"))
        self.monthComboBox.setItemText(6, _translate("MainWindow", "6"))
        self.monthComboBox.setItemText(7, _translate("MainWindow", "7"))
        self.monthComboBox.setItemText(8, _translate("MainWindow", "8"))
        self.monthComboBox.setItemText(9, _translate("MainWindow", "9"))
        self.monthComboBox.setItemText(10, _translate("MainWindow", "10"))
        self.monthComboBox.setItemText(11, _translate("MainWindow", "11"))
        self.monthComboBox.setItemText(12, _translate("MainWindow", "12"))
        self.orderLabel.setText(_translate("MainWindow", "Order"))
        self.orderComboBox.setItemText(0, _translate("MainWindow", "Newest to Oldest"))
        self.orderComboBox.setItemText(1, _translate("MainWindow", "Oldest to Newest"))
        self.NDcheckBox.setText(_translate("MainWindow", "Include Not Dated"))
        self.filterButton.setText(_translate("MainWindow", "Filter"))
        self.filterInfo.setText(_translate("MainWindow", "..."))
        self.viewSelectedButton.setText(_translate("MainWindow", "View Article"))
        self.saveArticleButton.setText(_translate("MainWindow", "Save Article"))
        self.groupBox_3.setTitle(_translate("MainWindow", "CoC News Article Manager"))
        self.label_2.setText(_translate("MainWindow", "This is where you can manage the articles downloaded after crawling is complete. Press SELECT FILE to select the .csv output from the crawler, then press UPLOAD. The date and title of all the articles will be displayed in the box below. Use the filter options to filter the articles displayed."))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Manager"))
        self.menuCrawler.setTitle(_translate("MainWindow", "Main"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.actionREADME.setText(_translate("MainWindow", "README"))
        self.actionAbout_2.setText(_translate("MainWindow", "About"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
